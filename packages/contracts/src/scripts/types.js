"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateTypes = exports.generateSystemTypes = exports.generateAbiTypes = void 0;
const typechain_1 = require("typechain");
const deferred_1 = require("./deferred");
const glob_1 = __importDefault(require("glob"));
const ids_1 = require("./ids");
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const build_1 = require("./build");
const forgeConfig_1 = require("./forgeConfig");
const constants_1 = require("./constants");
async function generateAbiTypes(inputDir, outputDir, options) {
    if (options?.clear) {
        console.log("Clearing typechain output directory", outputDir);
        (0, fs_1.rmSync)(outputDir, { recursive: true, force: true });
    }
    const cwd = options?.cwd ?? process.cwd();
    const allFiles = (0, typechain_1.glob)(cwd, [`${inputDir}/**/+([a-zA-Z0-9_]).json`]);
    const result = await (0, typechain_1.runTypeChain)({
        cwd,
        filesToProcess: allFiles,
        allFiles,
        outDir: outputDir,
        target: "ethers-v5",
    });
    console.log(`Successfully generated ${result.filesGenerated} files`);
}
exports.generateAbiTypes = generateAbiTypes;
async function generateSystemTypes(outputDir, options) {
    if (options?.clear) {
        console.log("Clearing system type output files", outputDir);
        (0, fs_1.rmSync)(path_1.default.join(outputDir, "/SystemTypes.ts"), { force: true });
        (0, fs_1.rmSync)(path_1.default.join(outputDir, "/SystemAbis.mts"), { force: true });
        (0, fs_1.rmSync)(path_1.default.join(outputDir, "/SystemAbis.mjs"), { force: true });
        (0, fs_1.rmSync)(path_1.default.join(outputDir, "/SystemMappings.ts"), { force: true });
    }
    let abis = [];
    let systems = [];
    let ids = [];
    let typePaths = [];
    const srcDir = await (0, forgeConfig_1.getSrcDirectory)();
    const systemsPath = path_1.default.join(srcDir, constants_1.systemsDir, "*.sol");
    const [resolve, , promise] = (0, deferred_1.deferred)();
    (0, glob_1.default)(systemsPath, {}, (_, matches) => {
        systems = matches.map((path) => {
            const fragments = path.split("/");
            return fragments[fragments.length - 1].split(".sol")[0];
        });
        ids = matches.map((path, index) => {
            const id = (0, ids_1.extractIdFromFile)(path);
            if (!id) {
                console.log("Path:", path);
                console.log("ID:", id);
                throw new Error("No ID found for" +
                    matches[index] +
                    ". Make sure your system source file includes a ID definition (uint256 constant ID = uint256(keccak256(<ID>));)");
            }
            return id;
        });
        abis = systems.map((system) => `../abi/${system}.json`);
        typePaths = systems.map((system) => `./ethers-contracts/${system}.ts`);
        resolve();
    });
    // Make the callback synchronous
    await promise;
    console.log("Matches", systems);
    console.log("Solidity", ids);
    console.log("Type paths", typePaths);
    console.log("ABIs", abis);
    const SystemMappings = `// Autogenerated using mud system-types
export const systemToId = {
${systems.map((system, index) => `  ${system}: "${ids[index]}",`).join("\n")}
};

export const idToSystem = {
${ids.map((id, index) => `  "${id}": "${systems[index]}",`).join("\n")}
};
  `;
    const SystemTypes = `// Autogenerated using mud system-types
${typePaths.map((path, index) => `import { ${systems[index]} } from "${path.replace(".ts", "")}";`).join("\n")}
 
export type SystemTypes = {
${systems.map((system, index) => `  "${ids[index]}": ${system};`).join("\n")}
};
`;
    const SystemAbis = `// Autogenerated using mud system-types
${abis.map((path, index) => `import ${systems[index]} from "${path}";`).join("\n")}

export const SystemAbis = {
${systems.map((system, index) => `  "${ids[index]}": ${system}.abi,`).join("\n")}
};
`;
    console.log("Generating files:");
    console.log("SystemTypes.ts", SystemTypes);
    console.log("SystemAbis.mts", SystemAbis);
    console.log("SystemMappings.ts", SystemMappings);
    (0, fs_1.writeFileSync)(`${outputDir}/SystemTypes.ts`, SystemTypes);
    (0, fs_1.writeFileSync)(`${outputDir}/SystemAbis.mts`, SystemAbis);
    (0, fs_1.writeFileSync)(`${outputDir}/SystemAbis.mjs`, SystemAbis);
    (0, fs_1.writeFileSync)(`${outputDir}/SystemMappings.ts`, SystemMappings);
}
exports.generateSystemTypes = generateSystemTypes;
/**
 * @param abiDir If not provided, the contracts are built and abis are exported to ./abi
 */
async function generateTypes(abiDir, outputDir = "./types", options) {
    if (!abiDir) {
        console.log("Compiling contracts");
        const buildOutput = await (0, forgeConfig_1.getOutDirectory)();
        abiDir = "./abi";
        await (0, build_1.forgeBuild)(options);
        (0, build_1.filterAbi)(buildOutput, abiDir);
    }
    await generateAbiTypes(abiDir, path_1.default.join(outputDir, "ethers-contracts"), options);
    await generateSystemTypes(outputDir, options);
}
exports.generateTypes = generateTypes;
